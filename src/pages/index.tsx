import Head from 'next/head'
import { Box, Flex, Text, HStack } from '@chakra-ui/react'
import { SectionContainer } from '@/components/SectionContainer'
import { DataFromSheet, Military, Shifts, ShiftsMil } from '@/types'
import { getDaysInMonthWithWeekends, handleQntPerShift } from '@/utils'
import { v4 as uuid } from 'uuid'
import { ShiftBox } from '@/components/shifts/ShiftBox'
import { useEffect, useRef, useState } from 'react'
import { BodyTemplate } from '@/components/BodyTemplate'
import { ShiftDatesHeader } from '@/components/shifts/ShiftDatesHeader'
import { GetServerSideProps } from 'next'
import { getSession } from 'next-auth/react'
import { decrypt } from '@/utils/crypto'
import { Session } from 'next-auth'


interface HomeProps {
  session: Session;  // Substitua SessionType pelo tipo correto de sua sessão
  militaries: Military[];
  necessaryShiftsPerDay: Shifts[]
  necessaryShiftsPerDayPlusCombinations: Shifts[]
  month:number
  year:number
}

export default function Home({ militaries, necessaryShiftsPerDay,month ,year}: HomeProps) {

  const [shifts, setShifts] = useState<Shifts[][]>([])

  useEffect(() => {
    const QntMilitariesPerDay = handleQntPerShift(militaries, necessaryShiftsPerDay,month,year)
    setShifts(QntMilitariesPerDay)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])


  const flexRef1 = useRef<HTMLDivElement>(null); // Referência para o primeiro Flex
  const flexRef2 = useRef<HTMLDivElement>(null); // Referência para o segundo Flex


  const handleScrollFlex1 = () => {


    if (flexRef1.current && flexRef2.current) {
      flexRef2.current.scrollLeft = flexRef1.current.scrollLeft;
    }
  };

  const handleScrollFlex2 = () => {

    if (flexRef1.current && flexRef2.current) {
      flexRef1.current.scrollLeft = flexRef2.current.scrollLeft;
    }
  };

  return (
    <>
      <Head>
        <title>ACC-RE App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>

        <BodyTemplate
          flexRef={flexRef2}
          handleScroll={handleScrollFlex2}
          necessaryShiftsPerDay={necessaryShiftsPerDay}
          shifts={shifts}
           month={month} year={year}        >

          <SectionContainer sectionId={"MilShifts"}
          >
            <HStack
              spacing={4}
              overflowY={"scroll"}
              h={200}
              sx={{
                '&::-webkit-scrollbar': {
                  width: '4px', // Ajuste para o tamanho desejado
                  height: '4px', // Para a barra de rolagem vertical
                },
                '&::-webkit-scrollbar-track': {
                  background: 'gray.200', // Cor de fundo da trilha da barra de rolagem
                },
                '&::-webkit-scrollbar-thumb': {
                  background: 'gray.500', // Cor da barra de rolagem
                  borderRadius: '8px', // Raio da borda para a barra de rolagem
                },
                '&::-webkit-scrollbar-thumb:hover': {
                  background: 'gray.600', // Cor da barra de rolagem ao passar o mouse
                },
              }}


            >
              <Flex flexDir={"column"}
                mt={"auto"}
              >
                <Box border={"1px"} bg={'yellow.300'} px={2} py={1} w={'48'} >
                  <Text textAlign={"center"}>
                    Militares
                  </Text>
                </Box>


                {
                  militaries.map(mil => {
                    return (
                        <Flex key={mil.milId + uuid()} w={'48'} >
                          <Box border={"1px"} bg={'whiteAlpha.300'} px={2} py={1} w={"100%"}>
                            <Text textAlign="center"
                              whiteSpace="nowrap"      // Mantém o texto em uma única linha
                              overflow="hidden"        // Esconde qualquer texto que exceda o espaço
                              textOverflow="ellipsis">
                              {mil.milName}
                            </Text>
                          </Box>
                        </Flex>
                    )
                  })
                }

              </Flex>
              <Flex
                overflowX={"auto"}
                mt={"auto"}

                ref={flexRef1}
                flexDir={"column"}
                onScroll={() => handleScrollFlex1()}
                sx={{
                  '&::-webkit-scrollbar': {
                    //width: '16px', // Ajuste para o tamanho desejado
                    height: '4px', // Para a barra de rolagem vertical
                  },
                  '&::-webkit-scrollbar-track': {
                    background: 'gray.200', // Cor de fundo da trilha da barra de rolagem
                  },
                  '&::-webkit-scrollbar-thumb': {
                    background: 'gray.500', // Cor da barra de rolagem
                    borderRadius: '8px', // Raio da borda para a barra de rolagem
                  },
                  '&::-webkit-scrollbar-thumb:hover': {
                    background: 'gray.600', // Cor da barra de rolagem ao passar o mouse
                  },
                }}
              >

                <Box >
                  <ShiftDatesHeader
                    month={month}
                    year={year}
                  />
                </Box>

                {
                  militaries.map((mil, i) => {
                    const isLess = mil.shiftsMil.length < getDaysInMonthWithWeekends(month, year).length ? true : undefined
                    if (isLess) {
                      mil.shiftsMil = getDaysInMonthWithWeekends(month, year).map(day => {
                        const shifts: ShiftsMil = {
                          day: String(day.day),
                          shift: undefined
                        }
                        return shifts
                      })
                    }
                    return (
                      <Flex key={mil.milId + i}
                      >
                        {mil.shiftsMil.map((shift, j) => {

                          return (
                            <ShiftBox key={j + uuid()} shiftMil={shift.shift ? shift.shift : " - "} />
                          )
                        })}
                      </Flex>
                    )
                  })
                }
              </Flex>

            </HStack>
          </SectionContainer>

        </BodyTemplate>
      </>
    </>

  )
}


export const getServerSideProps: GetServerSideProps<HomeProps> = async (context) => {
  const session = await getSession({ req: context.req });



  if (!session) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  try {
    const res = await fetch(`${process.env.NEXTAUTH_URL}/api/googlesheets`, {
      method: 'GET',
    })
    const dataCrypted = await res.json()
    const dataDecrypted = decrypt(dataCrypted)
    const data:DataFromSheet = JSON.parse(dataDecrypted)
    const { militaries:military } = data.tabs[0] 
    const { month } = data.tabs[0]
    const { year } = data.tabs[0]

    const militaries = military.filter((mil:Military)=>mil.milName!=="")

    const { controlers:shifts } = ((data.tabs))[0]


    

    const necessaryShiftsPerDay: Shifts[] = shifts.map((shift: any) => {
      const newShift: Shifts = {
        shiftId: shift.shiftName,
        shiftName: shift.shiftName,
        quantityOfMilitary: Number(shift.quantityOfMilitary),
      }
      return newShift
    })
    const Combinations: Shifts[] = shifts.map((shift: any) => {
      const newShift: Shifts = {
        shiftId: shift.combinations,
        shiftName: shift.combinations,
        quantityOfMilitary: 0
      }
      return newShift
    })

    const necessaryShiftsPerDayPlusCombinations = [
      ...necessaryShiftsPerDay,
      ...Combinations
    ].filter(shift => shift.shiftId !== undefined)

   
    
    return {
      props: {
        session,
        militaries,
        necessaryShiftsPerDay,
        necessaryShiftsPerDayPlusCombinations,
        month:Number(month),
        year:Number(year),
      },
    };


  } catch (error) {
    console.error(error);
    // Retorne um array vazio para militaries em caso de erro
    return {
      props: {
        session, militaries: []
        ,
        necessaryShiftsPerDay: [],
        necessaryShiftsPerDayPlusCombinations: [],
        month: 1,
        year: 2024,
      },
    };
  }

};