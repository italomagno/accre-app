import Head from 'next/head'
import { Box, Flex ,Text ,HStack} from '@chakra-ui/react'
import { SectionContainer } from '@/components/SectionContainer'
import { Military, Shifts, ShiftsMil } from '@/types'
import { getDaysInMonthWithWeekends, handleQntPerShift } from '@/utils'
import { v4  as uuid } from 'uuid'
import { ShiftBox } from '@/components/shifts/ShiftBox'
import { useEffect, useRef, useState } from 'react'
import { BodyTemplate } from '@/components/BodyTemplate'
import { ShiftDatesHeader } from '@/components/shifts/ShiftDatesHeader'
import { GetServerSideProps } from 'next'
import { getSession } from 'next-auth/react'


export const necessaryShiftsPerDay: Shifts[] = [
  {shiftId:"M" ,"shiftName": "M", "quantityOfMilitary": 6,},
  {shiftId:"R1" ,"shiftName": "R1" , "quantityOfMilitary":  8},
  {shiftId:"R2" ,"shiftName": "R2" , "quantityOfMilitary":  8},
  {shiftId:"T" ,"shiftName": "T", "quantityOfMilitary": 7},
  {shiftId:"R3" ,"shiftName": "R3" , "quantityOfMilitary":  5},
  {shiftId:"P" ,"shiftName": "P", "quantityOfMilitary": 6},
  {shiftId:"P2" ,"shiftName": "P2" , "quantityOfMilitary":  7},
  {shiftId:"S1" ,"shiftName": "S1" , "quantityOfMilitary":  1},
  {shiftId:"S2" ,"shiftName": "S2" , "quantityOfMilitary":  1},
    ]
export const necessaryShiftsPerDayPlusCombinations: Shifts[] = [
  ...necessaryShiftsPerDay,
  {shiftId:"M/P" ,"shiftName": "M/P", "quantityOfMilitary":     6},
  {shiftId:"M/P2" ,"shiftName": "M/P2" , "quantityOfMilitary":  8},
  {shiftId:"R1/P2" ,"shiftName": "R1/P2" , "quantityOfMilitary":  8},
]



export const militaries:Military[] = [
      {"milId": 6900259,"milName": "3S Italo Magno",
       "shiftsMil": []
       },
{"milName":"SO	FRANCISCO",milId:	435293	,shiftsMil: []},

{"milName":"SO	PEDRO	",milId:455185	,shiftsMil: []},

{"milName":"SO	NASCIMENTO",milId:	475214	,shiftsMil: []},

{"milName":"1S	HILTON",milId: 465819	,shiftsMil: []},

{"milName":"1S	SENA	 ",milId:520220	,shiftsMil: []},

{"milName":"1S	CLARA	",milId: 532150	,shiftsMil: []},

{"milName":"1S	VICTOR",milId: 536151	,shiftsMil: []},

{"milName":"1S	PEDRO	",milId: 536152	,shiftsMil: []},

{"milName":"1S	REBEKA",milId:	536111	,shiftsMil: []},

{"milName":"1S	PAMELA",milId:  539020	,shiftsMil: []},

{"milName":"1S	ADRIANO",milId:	539041	,shiftsMil: []},

{"milName":"1S	THAIZY",milId:	539089	,shiftsMil: []},

{"milName":"2S	REZENDE",milId:	541781	,shiftsMil: []},

{"milName":"2S	ABDIAS",milId:	 542068	,shiftsMil: []},

{"milName":"2S	DORE",milId:541223	,shiftsMil: []},

{"milName":"2S	ALEXANDRE",milId: 541169	,shiftsMil: []},

{"milName":"2S	GUSTAVO",milId:541216	,shiftsMil: []},

{"milName":"2S	ANDREY",milId:		541328	,shiftsMil: []},

{"milName":"2S	J JUNIOR",milId: 541505	,shiftsMil: []},


      
    ]

export default function Home() {

  const [shifts,setShifts] = useState<Shifts[][]>([])

    useEffect(()=>{
      const QntMilitariesPerDay = handleQntPerShift(militaries,necessaryShiftsPerDay)
      setShifts(QntMilitariesPerDay)
    // eslint-disable-next-line react-hooks/exhaustive-deps
    },[])


    const flexRef1 = useRef<HTMLDivElement>(null); // Referência para o primeiro Flex
    const flexRef2 = useRef<HTMLDivElement>(null); // Referência para o segundo Flex


    const  handleScrollFlex1 = () => {
        

        if (flexRef1.current && flexRef2.current) {
          flexRef2.current.scrollLeft = flexRef1.current.scrollLeft;
        }
      };
  
    const handleScrollFlex2 = () => {

      if (flexRef1.current && flexRef2.current) {
        flexRef1.current.scrollLeft = flexRef2.current.scrollLeft;
      }
    };
    
  return (
<>
      <Head>
        <title>ACC-RE App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <>

      <BodyTemplate
      flexRef={flexRef2}
      handleScroll={handleScrollFlex2}
      necessaryShiftsPerDay={necessaryShiftsPerDay}
      shifts={shifts}
      >

      <SectionContainer sectionId={"MilShifts"}
      >
          <HStack
           spacing={4}
          overflowY={"scroll"}
          h={{sm:200}}
          sx={{
            '&::-webkit-scrollbar': {
              width: '4px', // Ajuste para o tamanho desejado
              height: '4px', // Para a barra de rolagem vertical
            },
            '&::-webkit-scrollbar-track': {
              background: 'gray.200', // Cor de fundo da trilha da barra de rolagem
            },
            '&::-webkit-scrollbar-thumb': {
              background: 'gray.500', // Cor da barra de rolagem
              borderRadius: '8px', // Raio da borda para a barra de rolagem
            },
            '&::-webkit-scrollbar-thumb:hover': {
              background: 'gray.600', // Cor da barra de rolagem ao passar o mouse
            },
          }}
       
        
        >
          <Flex flexDir={"column"}
          mt={"auto"}
          >
                <Box  border={"1px"} bg={'yellow.300'} px={2} py={1} w={'48'} >
                    <Text textAlign={"center"}>
                      Militares
                    </Text>
                  </Box>
          

            {
              militaries.map(mil =>{
                return(
                  <>
                  <Flex key={mil.milId + uuid()} w={'48'} >
                    <Box  border={"1px"} bg={'whiteAlpha.300'} px={2} py={1} w={"100%"}>
                    <Text textAlign={"center"}>
                    {mil.milName}
                    </Text>
                    </Box>
                  </Flex>
                 </>
                )
              })
            }
            
          </Flex>
          <Flex 
          overflowX={"auto"} 
          mt={"auto"}
          
          ref={flexRef1}
          flexDir={"column"}
          onScroll={()=>handleScrollFlex1()}
          sx={{
            '&::-webkit-scrollbar': {
              //width: '16px', // Ajuste para o tamanho desejado
              height: '4px', // Para a barra de rolagem vertical
            },
            '&::-webkit-scrollbar-track': {
              background: 'gray.200', // Cor de fundo da trilha da barra de rolagem
            },
            '&::-webkit-scrollbar-thumb': {
              background: 'gray.500', // Cor da barra de rolagem
              borderRadius: '8px', // Raio da borda para a barra de rolagem
            },
            '&::-webkit-scrollbar-thumb:hover': {
              background: 'gray.600', // Cor da barra de rolagem ao passar o mouse
            },
          }}
        >
          
          <Box >
          <ShiftDatesHeader 
          month={2}
          year={2023}
          />
        </Box>

        {
          militaries.map((mil,i)=>{
            const isLess= mil.shiftsMil.length < getDaysInMonthWithWeekends(2,2023).length? true:undefined 
            if(isLess) {
              mil.shiftsMil = getDaysInMonthWithWeekends(2,2023).map(day=>   
                {
                  const shifts:ShiftsMil = {
                    day: String(day.day),
                    shift:undefined
                  }
                  return shifts})
            }
            return(
              <Flex key={mil.milId + i} 
              >
                {mil.shiftsMil.map((shift,j)=>{
                  
                return(
                  <ShiftBox key={j+uuid()} shiftMil={shift.shift?  shift.shift :  " - "}/>
                )
                })}
              </Flex>
            )
          })
        }
          </Flex>

          </HStack>
      </SectionContainer>

      </BodyTemplate>

        

         


      </>
</>

  )
}


export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getSession({ req: context.req });
  if (!session) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
};
